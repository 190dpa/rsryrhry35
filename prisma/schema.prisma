// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                     String    @id @default(cuid())
  username               String    @unique
  email                  String    @unique
  passwordHash           String
  isAdmin                Boolean   @default(false)
  isSupremeAdmin         Boolean   @default(false)
  isTester               Boolean   @default(false)
  ip                     String?
  status                 String    @default("active") // active, banned, unbanned
  avatarUrl              String?   @default("https://i.imgur.com/DCp3Qe0.png")
  robloxUsername         String?
  discordId              String?   @unique
  createdAt              DateTime  @default(now())

  // Relação com RPG
  rpg                    RPG?

  // Relação com Banimento
  banDetails             Json?

  // Relação com Recuperação de Senha
  recoveryToken          String?
  recoveryTokenExpires   DateTime?
  securityQuestion       String?
  securityAnswerHash     String?

  // Relações com Suporte
  createdTickets         Ticket[]        @relation("CreatedTickets")
  supportMessages        TicketMessage[]
}

model RPG {
  id              String      @id @default(cuid())
  level           Int         @default(1)
  xp              Int         @default(0)
  xpToNextLevel   Int         @default(100)
  coins           Int         @default(10)
  godMode         Boolean?    @default(false)

  // Relação com o Usuário (1 para 1)
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String      @unique

  // Campo para armazenar os status base do jogador
  stats           Json        @default("{\"strength\": 1, \"dexterity\": 1, \"intelligence\": 1, \"defense\": 1}")

  // Coleções (JSON é uma forma simples de começar)
  characters      String      @default("[]") // Armazena um array de objetos de personagens
  inventory       String      @default("[]") // Armazena um array de objetos de itens
  pets            String      @default("[]") // Armazena um array de objetos de pets
  equippedWeapon  String?     // Armazena o objeto da arma equipada

  // Relação com Guilda
  guildId         String?
  guild           Guild?      @relation(fields: [guildId], references: [id], onDelete: SetNull)
}

model Guild {
  id           String   @id @default(cuid())
  name         String   @unique
  tag          String   @unique
  ownerId      String
  isPrivate    Boolean  @default(false)
  inviteCode   String?  @unique
  createdAt    DateTime @default(now())

  // Relação com Membros
  members      RPG[]

  // Campos JSON para simplicidade
  news         Json     @default("[]")
  bannedUsers  Json     @default("[]")
  mutedUsers   Json     @default("{}")
}

model Ticket {
  id               String          @id @default(cuid())
  status           String          @default("open") // open, resolved
  category         String
  description      String
  createdAt        DateTime        @default(now())
  discordChannelId String?

  // Relações
  creator          User            @relation("CreatedTickets", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId        String
  messages         TicketMessage[]
}

model TicketMessage {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())

  // Relações
  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  ticketId  String
  sender    User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId  String
}
